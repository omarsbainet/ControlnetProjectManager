@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@using Controlnet_Project_Manager.Areas.Identity.Data
@using Controlnet_Project_Manager.Data

@using Button = Controlnet_Project_Manager.Shared.Model.Button
@using Controlnet_Project_Manager.Shared.Model
@using MudBlazor
@using System.Reflection;
@using System.ComponentModel;
@using static Controlnet_Project_Manager.Pages.Index


@attribute [Authorize]
@inject ApplicationDbContext _ApplicationDbContext
@inject IDbContextFactory<ApplicationDbContext> DbFactory

@inject AuthenticationStateProvider _auth
@inject UserManager<CPMUser> _UserManager
@inject IDialogService _dialogService;
@inject CRUD Crud
@inject IHttpContextAccessor _httpContextAccessor
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _navigationManager
@inject MyCustomTheme tema;

    <style >
    body {
        background: @(Layout.esModoNocturno() ? $"{tema.Theme.PaletteDark.Background}" : $"{tema.Theme.Palette.Background}");
    }


    .mud-paper {
        color: #000;
        font-family: Arial, Helvetica, sans-serif;
        font-size: 16px;
        text-align: center;
    }


    .mud-typography-subtitle {
        font-size: 1.0rem;
        font-family: Arial, Helvetica, sans-serif;
        font-weight: bold;
        letter-spacing: 0;
        text-transform: none;
    }


    .mud-input-label-outlined {
        transform: translate(14px, 20px) scale(1);
        pointer-events: none;
        padding: 0 5px !important;
    }


    .mud-toolbar {
        --mud-internal-toolbar-height: 15%;
    }


    .titulo-estado {
        font-size: 1.0rem;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        width: 100%;
        height: 60px;
    }


    .mud-paper {
        font-size: 0.8rem;
        text-align: left;
    }

    .floating-button {
        position: fixed;
        bottom: 20px;
    }


    .text-task {
        font-size: 0.8rem;
        color: #90A4AE;
    }


    .text-task-black {
        font-size: 0.8rem;
        color: #000;
    }
    .text-task-oscuro{
        font-size: 0.8rem;
        color: #fff;
    }


    .mud-menu-custom {
        width: 300px;
    }

    .separador {
        margin: 2px 0;
    }


    .cuadro-proyecto {
        padding: 15px;
        background-color: white;
        border-radius: 5px;
        margin-bottom: 20px;
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
        .cuadro-incidencia, .cuadro-desarrollo

    {
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
    }

    .cell-template {
        border: 1px solid @tema.Theme.Palette.Primary;
        color: @tema.Theme.Palette.Primary;
        background-color: @tema.Theme.Palette.Background;
        margin-top: 5px;
        margin-left: 5px;
        margin-right: 5px;
    }
    .no-selection {
        pointer-events: none;
    }
</style>


<MudToolBar DisableGutters="true" Class="d-flex" Style="@(Layout.esModoNocturno() ? $"border-bottom-left-radius: 10px; border-bottom-right-radius: 10px; height: 60px; width: 100%; flex-direction: row; background-color: {tema.Theme.PaletteDark.Primary.ToString()}; padding: 0 10px; justify-content: space-between; align-items: center;" : $"border-bottom-left-radius: 10px; border-bottom-right-radius: 10px; height: 60px; width: 100%; flex-direction: row; background-color: {tema.Theme.Palette.Primary.ToString()}; padding: 0 10px; justify-content: space-between; align-items: center;")">

    <div style="display: flex; flex-direction: row; justify-content: space-around; width: 33%;">
        @if (menuRol != null && menuRol.Crear)
        {
            <MudButton @onclick="@(() => InvokeAsync(NewIncidenciaDialog))"
                       Variant="Variant.Text"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Add">
                Nueva Incidencia
            </MudButton>
        }
    </div>

    <div style="width: 33%; text-align: center;">
        <MudText Color="Color.Secondary" Typo="Typo.h6">INCIDENCIAS</MudText>
    </div>

    <div style="width: 33%; flex-direction: row; justify-content: space-around; display: flex; align-items: center; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">

        @*<MudDateRangePicker @ref="_picker" Placeholder="@("Selecciona una fecha")" Clearable="true" @bind-DateRange="_dateRange" Variant="Variant.Outlined" Style="color: white; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px; margin: 0px; height: 43px;" Margin="Margin.Dense">
        <PickerActions>
        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Limpiar</MudButton>
        <MudButton OnClick="@(() => _picker.Close(false))">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
        </PickerActions>
        </MudDateRangePicker>*@

    

        <MudMenu AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.BottomRight" Class="mud-menu-custom">
            <ActivatorContent>
                <MudChip Size="Size.Large" Color="Color.Secondary" Style="@(Layout.esModoNocturno() ? $"color: {tema.Theme.PaletteDark.Primary.ToString()}; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px;" : $"color: {tema.Theme.Palette.Primary.ToString()}; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px;")">
                    <div style="position: absolute; left: 15px; max-width: 80%; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                        @(TextSelection("Estado", _selectedEstadosIncidencia))
                    </div>
                    <div style="position: absolute; right: 5px; bottom: 8px;">
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Class="ms-1" />
                    </div>
                </MudChip>
            </ActivatorContent>
            <ChildContent>
                @foreach (var estado in _estadosIncidencias.Select(it => it.Nombre))
                {
                    var isChecked = _selectedEstadosIncidencia.Contains(estado);

                    <MudMenuItem Style="width: 250px; height: 50px;">
                        <div>
                            <MudCheckBox T="bool" @bind-Checked=isChecked Label="@estado" @onclick="@(() => ToggleSelection(estado,_selectedEstadosIncidencia))" />
                        </div>
                    </MudMenuItem>
                }
            </ChildContent>
        </MudMenu>
    </div>

</MudToolBar>
@*
    <br />
<br />
<ToolBarContent>
    <MudText Typo="Typo.h6">@(ProyectoSelect)</MudText>
    <MudSpacer/>
    <MudSpacer/>
    <ChildContent>
        <MudMenuItem Style="width: 250px; height: 50px;">
            <div>
                <MudCheckBox T="bool" @bind-Checked=isChecked Label="Vista normal" @onclick="@(() => Vista("Normal"))" />
            </div>
        </MudMenuItem>
        <MudMenuItem Style="width: 250px; height: 50px;">
            <div>
                <MudCheckBox T="bool" @bind-Checked=isChecked Label="Vista Kanban" @onclick="@(() => Vista("Kanban"))" />
            </div>
        </MudMenuItem>
    </ChildContent>
</ToolBarContent>
*@
<br/>
<br/>
@if (!Cargando)
{

    <MudDropContainer T="Incidencia" @ref="_dropContainer" Items="@FiltrarIncidencias()" ItemsSelector="@((item,column) => item.EstadoIncidencia.Nombre == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row" Style="width:100%;" CanDrop="@CanDrop">

        <ChildContent>
            <div style="display: flex; justify-content: space-around;">
                @foreach (var item in _selectedEstadosIncidencia)
                {
                    string customClass = "my-2 mx-2 ";
                    string customKanTaskClass = "mud-height-full ";

                    var incidenciasEnEstado = ListaIncidencias.Count(p => p.EstadoIncidencia.Nombre == item);
                    ColorStatus colorStatus = _color.FirstOrDefault(c => c.Name == item);
                    string customBorderClass = "border-left: 5px solid " + colorStatus.ColorHeader;

                    <MudPaper Elevation="3" Width="300px" MinHeight="100px" Class="@customClass">
                        <MudText Typo="Typo.subtitle2" Class="titulo-estado" Style="@(Layout.esModoNocturno() ? "color:white" : "")">@item: @incidenciasEnEstado</MudText>
                        <hr style="border-top: 1px solid @colorStatus.ColorHeader; width: 100%;">
                        <MudDropZone T="Incidencia" Identifier="@item" Class="@customKanTaskClass" Style="margin: 5px;"></MudDropZone>
                    </MudPaper>

                }
            </div>
        </ChildContent>


        <ItemRenderer>
            @if (context != null)
            {
                string customBorder = "pa-4 lg my-3 " + context.EstadoIncidencia;

                ColorStatus colorStatus = _color.FirstOrDefault(c => c.Name == context.EstadoIncidencia.Nombre);
                string customBorderClass = "border-left: 5px solid " + colorStatus.ColorHeader;

                <MudPaper Class="pa-4 lg my-3" Style="@customBorderClass" @ondblclick="@(() => InfoIncidenciaDialog(context))">
                    <div class="d-flex align-items-center" style="margin-bottom: 8px;">
                        <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Class="bi" Style="@(Layout.esModoNocturno() ? "margin-right: 8px;color:white": "margin-right: 8px;")" />
                        <MudText Class="titulo-proyecto" Style="@(Layout.esModoNocturno() ? "color:white" : "")">@context.Nombre</MudText>

                    </div>
                    <div class="d-flex flex-column">

                        <div class="d-flex align-items-center">

                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" Class="mr-2" />

                            <span class="text-task">Fecha Creación: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">@context.FechaCreacion.ToString("dd/MM/yyyy")</span></span>
                        </div>
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" Class="mr-2" />
                            @if (context.FechaCerrada != null)
                            {
                                <span class="text-task">Fecha Cerrada: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">@(context.FechaCerrada.ToString().Substring(0, 10))</span></span>
                            }
                            else
                            {
                                <span class="text-task">Fecha Cerrada: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">Sin fecha</span></span>
                            }

                        </div>
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.PersonOutline" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" Class="mr-2" />
                            @if (context.Autor != null)
                            {
                                <span class="text-task">Autor: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">@context.Autor</span></span>
                            }
                            else
                            {
                                <span class="text-task">Autor: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">Sin autor</span></span>
                            }

                        </div>
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" Class="mr-2" />
                            @if (context.UsuarioAsignado != null)
                            {
                                <span class="text-task">Programador: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">@context.UsuarioAsignado.Nombre</span></span>
                            }
                            else
                            {
                                <span class="text-task">Programador: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">Sin asignar</span></span>
                            }

                        </div>
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" Class="mr-2" />
                            @if (context.Informacion != null)
                            {
                                <span class="text-task">Descripción: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">@((MarkupString)@context.Informacion)</span></span>
                            }
                            else
                            {
                                <span class="text-task">Descripción: <span class="@(Layout.esModoNocturno() ? "text-task-oscuro" : "text-task-black")">Sin información</span></span>
                            }

                        </div>
                        <MudButtonGroup VerticalAlign="false" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" Variant="Variant.Outlined" Class="align-self-center mt-2">
                            @if (menuRol != null && menuRol.Editar)
                            {
                                <MudTooltip Text="Editar Incidencia">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" OnClick="@((e) => { EditIncidenciaDialog(context); })" />
                                </MudTooltip>
                            }
                            @if (menuRol != null && menuRol.Eliminar)
                            {
                                <MudTooltip Text="Eliminar">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="@(Layout.esModoNocturno() ? Color.Tertiary : Color.Primary)" OnClick="@((e) => { EliminarIncidencia(context); })" />
                                </MudTooltip>
                            }
                        </MudButtonGroup>

                    </div>

                </MudPaper>

            }
        </ItemRenderer>
    </MudDropContainer>


}

@code{
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    bool isChecked = false;
    string vistaActual = "Normal";
    [Parameter] public string id { get; set; }
    [Parameter] public EventCallback<int> OnCountIncidencia { get; set; }
    [Parameter] public Proyecto proyecto { get; set; }
    [Parameter] public string ProyectoSelect { get; set; }

    private List<String> _selectedEstadosIncidencia = new List<String>();
    private List<ProgramadoresProyecto> _programadores = new List<ProgramadoresProyecto>();
    private List<EstadoIncidencia> _estadosIncidencias = new List<EstadoIncidencia>();
    private int numIncidencia { get; set; }
    public CPMUser usuario { get; set; }
    private bool Cargando = true;
    Stack<Incidencia> navegacionProyecto = new Stack<Incidencia>();
    private Incidencia incidencia { get; set; }
    private List<Incidencia> ListaIncidencias = new List<Incidencia>();
    List<Incidencia> _section = new List<Incidencia>();
    private MudDropContainer<Incidencia> _dropContainer;
    private List<ColorStatus> _color = new();
    private string url = "";
    private int idMenu = 0;
    private MenuRol menuRol = null;

    private void Vista(string tipo){
        vistaActual = tipo;
    }

    private void ToggleSelection(string item, List<String> lista)
    {
        if (lista.Contains(item))
        {
            lista.Remove(item);
        }
        else
        {
            lista.Add(item);
        }
    }

    public static string LightenColor(string colorHex)
    {
        if (!colorHex.StartsWith("#") || (colorHex.Length != 7 && colorHex.Length != 9))
        {
            throw new ArgumentException("Formato de color hexadecimal no válido.", nameof(colorHex));
        }

        // Convertir el colorHex a valores RGB y alfa
        byte r = Convert.ToByte(colorHex.Substring(1, 2), 16);
        byte g = Convert.ToByte(colorHex.Substring(3, 2), 16);
        byte b = Convert.ToByte(colorHex.Substring(5, 2), 16);
        byte a = colorHex.Length == 9 ? Convert.ToByte(colorHex.Substring(7, 2), 16) : (byte)255;

        // Aclarar los componentes RGB
        r = (byte)(r + (255 - r) * 0.8);
        g = (byte)(g + (255 - g) * 0.8);
        b = (byte)(b + (255 - b) * 0.8);

        // Convertir los valores a formato hexadecimal
        string nuevoColorHex = $"#{r:X2}{g:X2}{b:X2}{a:X2}";

        return nuevoColorHex;
    }

    private async Task TaskUpdated(MudItemDropInfo<Incidencia> info)
    {
        Console.WriteLine(info.Item.EstadoIncidencia.Nombre + " " + info.DropzoneIdentifier);
        var estadoToUpdate = _ApplicationDbContext.EstadosIncidencias.FirstOrDefault(e => e.Nombre == info.DropzoneIdentifier);
        info.Item.EstadoIncidencia = estadoToUpdate;
        await UpdateIncidenciaStatus(info.Item.Id, info.DropzoneIdentifier);
    }

    private bool CanDrop(Incidencia item, string column)
    {
        return menuRol.Editar;
    }

    private async void EliminarIncidencia(Incidencia inc)
    {

        var result = await _dialogService.ShowMessageBox("Eliminar incidencia", "¿Seguro que quieres eliminar incidencia?", "Si", "No");
        inc = _ApplicationDbContext.Incidencias.FirstOrDefault(it => it.Id == inc.Id);

        if (result is true && inc != null)
        {

            _ApplicationDbContext.Incidencias.Remove(inc);
            await _ApplicationDbContext.SaveChangesAsync();

        }

        _ApplicationDbContext.EstadosIncidencias.OrderBy(it => it.Id).ToList();
        if (int.TryParse(id, out int projectId))
        {
            OnCountIncidencia.InvokeAsync(await _ApplicationDbContext.Incidencias.Where(it => it.Proyecto.Id == projectId && it.EstadoIncidencia.Nombre == "Pendiente").CountAsync());
        }
        await CargarIncidenciasPorProyecto(proyecto);
        StateHasChanged();

    }

    private async Task EditIncidenciaDialog(Incidencia pro)
    {
        @if (menuRol.Editar)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, DisableBackdropClick = true, MaxWidth = MaxWidth.Medium };

            var parameters = new DialogParameters();
            parameters.Add("incidencia", pro);
            parameters.Add("proyecto", proyecto);
            var dialog = await _dialogService.Show<NewIncidencia>("Editar Incidencia", parameters, options).Result;
            if (dialog.Data != null)
            {
                // Si FinalizacionDesarrollo está activo, establecer la FechaFinalizacion
                if (pro.EstadoIncidencia.CierraIncidencia)
                {
                    pro.FechaCerrada = DateTime.Now;
                    _ApplicationDbContext.Incidencias.Update(pro);
                    _ApplicationDbContext.SaveChanges();
                }

                await CargarIncidenciasPorProyecto(proyecto);
                StateHasChanged();
            }
        }
        //SelectedItem = null;
    }

    private async Task UpdateIncidenciaStatus(int incidencia, string newStatus)
    {
        // Consultar el estado con el nombre proporcionado en la base de datos.
        var estadoToUpdate = _ApplicationDbContext.EstadosIncidencias.FirstOrDefault(e => e.Nombre == newStatus);

        // Consultar la incidencia con el nombre proporcionado en la base de datos.
        var incidenciaToUpdate = _ApplicationDbContext.Incidencias.FirstOrDefault(p => p.Id == incidencia);

        // Verifica si se encontraron tanto el proyecto como el estado en la base de datos.
        if (incidenciaToUpdate != null && estadoToUpdate != null)
        {
            // Actualiza el estado del proyecto con el estado encontrado.
            incidenciaToUpdate.EstadoIncidencia = estadoToUpdate;

            // Guarda los cambios en la base de datos.
            _ApplicationDbContext.SaveChanges();
        }
    }

    private async void InfoIncidenciaDialog(Incidencia inc)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Small };
        parameters.Add("incidencia", inc);
        var dialog = await _dialogService.Show<InfoIncidencia>("Ver Informacion de la Incidencia", parameters, options).Result;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (int.TryParse(id, out int projectId))
            {
                usuario = Layout.usuario;

                url = GetLastSegmentUrl();
                idMenu = GetIdMenu(url);
                menuRol = await Crud.GetMenuRol(idMenu, usuario);

                Cargando = false;
                navegacionProyecto.Push(incidencia);
                proyecto = await _ApplicationDbContext.Proyectos.FindAsync(projectId);
                await CargarIncidenciasPorProyecto(proyecto);
                await cargarProgramadores();
                await cargarEstadosIncidencias();
                await using var ctx = await DbFactory.CreateDbContextAsync();

                // Obtener la lista de nombres de los tipos de incidencias
                var tiposIncidencias = await ctx.EstadosIncidencias
                                                .Where(e => e.Notificar)
                                                .Select(e => e.Nombre)
                                                .ToListAsync();


                Dictionary<string, int> recuentoIncidenciasPorTipo = new Dictionary<string, int>();

                foreach (var tipo in tiposIncidencias)
                {
                    int recuento = await ctx.Incidencias
                                            .Where(it => it.Proyecto.Id == projectId && it.EstadoIncidencia.Nombre == tipo)
                                            .CountAsync();

                    recuentoIncidenciasPorTipo.Add(tipo, recuento);
                }

                _color = _estadosIncidencias.Select(estado => new ColorStatus(
                                                    estado.Nombre,
                                                    estado.Color,
                                                    LightenColor(estado.Color)
                                                           )).ToList();

                await CalcularTotalIncidencias();
            }
            else
            {
                await CargarIncidenciasDesdeBD();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Task.Delay(100);
            await OnInitializedAsync();
        }
    }

    private string TextSelection(string item, List<String> lista)
    {
        var texto = "";

        if (lista.Count == 0)
        {
            texto = item;

        }
        else if (lista.Count == 1)
        {
            texto = lista.FirstOrDefault();

        }
        else
        {
            texto = "2 " + item + " o más seleccionados";
            texto = texto.Substring(0, Math.Min(texto.Length, 25)) + "...";
        }
        FiltrarIncidencias();
        return texto;
    }

    private List<Incidencia> FiltrarIncidencias()
    {
        return ListaIncidencias
            .FindAll(it => (!_selectedEstadosIncidencia.Any() || _selectedEstadosIncidencia.Any(s => s == it.EstadoIncidencia?.Nombre)));
    }

    private async Task cargarProgramadores()
    {
        if (int.TryParse(id, out int projectId))
        {
            await using var ctx = await DbFactory.CreateDbContextAsync();

            _programadores = await ctx.ProgramadoresProyectos.Include(it => it.Programador).Include(it => it.Proyecto).Where(programador => programador.Proyecto.Id == projectId).ToListAsync();
        }
    }

    private async Task cargarEstadosIncidencias()
    {
        await using var ctx = await DbFactory.CreateDbContextAsync();

        _estadosIncidencias = await ctx.EstadosIncidencias.ToListAsync();
        _selectedEstadosIncidencia = ListaIncidencias.ConvertAll(c => c.EstadoIncidencia.Nombre).Distinct().ToList();

    }

    private async Task CargarIncidenciasDesdeBD()
    {
        try
        {
            ListaIncidencias = await _ApplicationDbContext.Incidencias.Include(it => it.EstadoIncidencia).Include(it => it.Proyecto).Include(it => it.UsuarioAsignado).Include(it => it.Autor).ToListAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Task.Delay(100);
            await CargarIncidenciasDesdeBD();
        }
    }

    private async Task CalcularTotalIncidencias()
    {
        if (int.TryParse(id, out int projectId))
        {
            await using var ctx = await DbFactory.CreateDbContextAsync();

            // Obtener la lista de nombres de los tipos de incidencias seleccionados
            var tiposIncidencias = await ctx.EstadosIncidencias
                                            .Where(e => e.Notificar)
                                            .Select(e => e.Nombre)
                                            .ToListAsync();

            // Contador para el total de incidencias
            int totalIncidencias = 0;

            // Iterar sobre cada tipo y sumar el total de incidencias
            foreach (var tipo in tiposIncidencias)
            {
                int recuento = await ctx.Incidencias
                                        .Where(it => it.Proyecto.Id == projectId && it.EstadoIncidencia.Nombre == tipo)
                                        .CountAsync();

                totalIncidencias += recuento;
            }

            // Asignar el total al contador
            numIncidencia = totalIncidencias;

            // Llamar a OnCountIncidencia para actualizar el valor en la página anterior
            await OnCountIncidencia.InvokeAsync(numIncidencia);
        }
        FiltrarIncidencias();
    }

    public class KanbanIncidenciaItem
    {
        public int Id { get; init; }
        public string Name { get; init; }
        public string Status { get; set; }
        public DateTime FechaPrevistaContrato { get; set; }
        public DateTime FechaPrevistaEntrega { get; set; }
        public int HorasEstimadas { get; set; }
        public string Cliente { get; set; }

        public KanbanIncidenciaItem(int id, string name, string status, DateTime fechaPrevistaContrato, DateTime fechaPrevistaEntrega, int horasEstimadas, string cliente)
        {
            Id = id;
            Name = name;
            Status = status;
            FechaPrevistaContrato = fechaPrevistaContrato;
            FechaPrevistaEntrega = fechaPrevistaEntrega;
            HorasEstimadas = horasEstimadas;
            Cliente = cliente;
        }
    }


   
    private async void NewIncidenciaDialog()
    {

        if (incidencia == null)
        {
            incidencia = new Incidencia();
        }

        if (!string.IsNullOrEmpty(id))
        {
            if (int.TryParse(id, out int projectId))
            {

                incidencia.Proyecto = await _ApplicationDbContext.Proyectos.FindAsync(projectId);

                var parameters = new DialogParameters();
                parameters.Add("Proyecto", incidencia.Proyecto);
                var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
                var dialog = await _dialogService.Show<NewIncidencia>("Nueva incidencia", parameters, options).Result;

                if (dialog.Data != null)
                {
                    await CargarIncidenciasPorProyecto(proyecto);
                    OnCountIncidencia.InvokeAsync(await _ApplicationDbContext.Incidencias.Where(it => it.Proyecto.Id == projectId && it.EstadoIncidencia.Nombre == "Pendiente").CountAsync());
                    StateHasChanged();
                }
            }
            else
            {

                Console.WriteLine("ID de incidencia no válida");
                return;
            }
        }
    }

    private async Task CargarIncidenciasPorProyecto(Proyecto pro)
    {
        try
        {

            ListaIncidencias = await _ApplicationDbContext.Incidencias.Include(it => it.EstadoIncidencia).Include(it => it.Proyecto).Include(it => it.UsuarioAsignado).Include(it => it.Autor).Where(incidencia => incidencia.Proyecto.Id == pro.Id).ToListAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await Task.Delay(100);
            await CargarIncidenciasPorProyecto(pro);
        }
    }

    private string GetLastSegmentUrl()
    {
        Uri uri = new Uri(_navigationManager.Uri);
        Uri basePath = new Uri(_navigationManager.BaseUri);
        string relativeUri = basePath.MakeRelativeUri(uri).ToString();
        int indiceBarra = relativeUri.IndexOf('/');
        string nombreUrl = relativeUri.Substring(0, indiceBarra);
        return nombreUrl;
    }

    private int GetIdMenu(string url)
    {
        int menuId = 0;
        foreach (MenuEnum menuOption in Enum.GetValues(typeof(MenuEnum)))
        {
            if (GetEnumDescription(menuOption).Equals(url))
            {
                menuId = (int)menuOption;
                return menuId;
            }
        }
        return menuId;
    }

    private string GetEnumDescription(Enum value)
    {
        Type type = value.GetType();
        string nombre = Enum.GetName(type, value);
        FieldInfo fieldInfo = type.GetField(nombre);

        DescriptionAttribute attribute = Attribute.GetCustomAttribute(fieldInfo, typeof(DescriptionAttribute)) as DescriptionAttribute;
        return attribute == null ? null : attribute.Description;
    }
}
