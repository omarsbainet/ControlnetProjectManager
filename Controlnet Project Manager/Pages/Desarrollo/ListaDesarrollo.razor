@using GemBox.Spreadsheet
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@using Controlnet_Project_Manager.Areas.Identity.Data
@using Controlnet_Project_Manager.Data
@using System.Reflection;
@using System.ComponentModel;

@using Button = Controlnet_Project_Manager.Shared.Model.Button
@using Controlnet_Project_Manager.Shared.Model
@using Controlnet_Project_Manager.Pages.Desarrollo
@using System.Data


@attribute [Authorize]

@inject AuthenticationStateProvider _auth
@inject UserManager<CPMUser> _UserManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService _dialogService;
@inject CRUD Crud
@inject IHttpContextAccessor _httpContextAccessor
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _navigationManager
@inject ApplicationDbContext _ApplicationDbContext
@inject MyCustomTheme tema;
@inject ISnackbar Snackbar;
@inject NavigationManager _navigation;

<style>
    .mud-menu-custom {
        width: 300px;
    }

    /*     .custom-date-picker .mud-picker-content {
                border-bottom: none;
            } */

    .rounded-date-picker {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

        .rounded-date-picker .mud-input {
            border-radius: 8px; /* Ajusta el valor según tus preferencias */
            font-size: 12px; /* Tamaño de fuente más pequeño */
        }

        /* Fondo blanco */
        .rounded-date-picker .mud-picker-content {
            background-color: #ffffff;
        }


    .btnExcel {
        margin-left: 100px;
    }

</style>

<MudToolBar DisableGutters="true" Class="d-flex" Style="@((Layout.esModoNocturno() ? $"border-bottom-left-radius: 10px; border-bottom-right-radius: 10px; height: 60px; width: 100%; flex-direction: row; background-color: {tema.Theme.PaletteDark.Primary.ToString()}; padding: 0 10px; justify-content: space-between; align-items: center;" : $"border-bottom-left-radius: 10px; border-bottom-right-radius: 10px; height: 60px; width: 100%; flex-direction: row; background-color: {tema.Theme.Palette.Primary.ToString()}; padding: 0 10px; justify-content: space-between; align-items: center;"))">

    <div style="display: flex; flex-direction: row; justify-content: space-around; width: 33%;">
        @if (menuRol != null && menuRol.Crear)
        {
            <MudButton @onclick="@(() => InvokeAsync(NewDesarrolloDialog))"
                       Variant="Variant.Text"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Add">
                Nuevo Desarrollo
            </MudButton>
        }
    </div>

    <div style="width: 33%; text-align: center;">
        <MudText Color="Color.Secondary" Typo="Typo.h6">DESARROLLOS</MudText>
    </div>

    <div style="width: 33%; flex-direction: row; display: flex; align-items: center; justify-content: space-around">
        @*
        <MudDateRangePicker @ref="_picker" @bind-DateRange="_dateRange" Style="color: #009ee0; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px; margin: 0px;border: 1px solid transparent; border-radius: 20px; height: 43px; background-color: white;" Margin="Margin.Dense">
        <PickerActions>
        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Limpiar</MudButton>
        <MudButton OnClick="@(() => _picker.Close(false))">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
        </PickerActions>
        </MudDateRangePicker>*@
        <MudMenu AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.BottomRight" Class="mud-menu-custom">
            <ActivatorContent>
                <MudChip Size="Size.Large" Color="Color.Secondary" Style="@((Layout.esModoNocturno() ? $"color: {tema.Theme.PaletteDark.Primary.ToString()}; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px;" : $"color: {tema.Theme.Palette.Primary.ToString()}; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px;"))">
                    <div style="position: absolute; left: 15px; max-width: 80%; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                        @(TextSelection("Programador", _selectedProgramadores))
                    </div>
                    <div style="position: absolute; right: 5px; bottom: 8px;">
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Class="ms-1" />
                    </div>
                </MudChip>
            </ActivatorContent>
            <ChildContent>
                <div style="max-height: 300px; overflow-y: auto;">
                @foreach (var programador in _programadores.Select(it => it.Programador.Nombre))
                {
                    var isChecked = _selectedProgramadores.Contains(programador);

                    <MudMenuItem Style="width: 250px; height: 50px;">
                        <div>
                            <MudCheckBox T="bool" @bind-Checked=isChecked Label="@programador" @onclick="@(() => ToggleSelection(programador,_selectedProgramadores))" />
                        </div>
                    </MudMenuItem>
                }
                </div>
            </ChildContent>
        </MudMenu>

        <MudMenu AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.BottomRight" Class="mud-menu-custom">
            <ActivatorContent>
                <MudChip Size="Size.Large" Color="Color.Secondary" Style="@((Layout.esModoNocturno() ? $"color: {tema.Theme.PaletteDark.Primary.ToString()}; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px;" : $"color: {tema.Theme.Palette.Primary.ToString()}; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 5px;"))">
                    <div style="position: absolute; left: 15px; max-width: 80%; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                        @(TextSelection("Estado", _selectedEstadosDesarrollo))
                    </div>
                    <div style="position: absolute; right: 5px; bottom: 8px;">
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Class="ms-1" />
                    </div>
                </MudChip>
            </ActivatorContent>
            <ChildContent>
                @foreach (var estado in _estadosDesarrollo.Select(it => it.Nombre))
                {
                    var isChecked = _selectedEstadosDesarrollo.Contains(estado);

                    <MudMenuItem Style="width: 250px; height: 50px;">
                        <div>
                            <MudCheckBox T="bool" @bind-Checked=isChecked Label="@estado" @onclick="@(() => ToggleSelection(estado,_selectedEstadosDesarrollo))" />
                        </div>
                    </MudMenuItem>
                }
            </ChildContent>
        </MudMenu>
    </div>

</MudToolBar>

<br />
<br />

@if (id != null)
{
    <MudDataGrid @ref="@_grid" Items="@FiltrarDesarrollo()" T="Desarrollo" RowClick="@((x)=>EditDesarrolloDialog(x.Item))"
                 Hover="true" ShowColumnOptions="false" ShowMenuIcon="false" Dense="true"
                 Hideable="true" CurrentPage="@_selectedPage" RowsPerPage="15" Style="@((Layout.esModoNocturno() ? $"background-color:{tema.Theme.PaletteDark.Surface.ToString()}; color:white" : ""))">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@(ProyectoSelect)</MudText>
            <MudButton Class="btnExcel" OnClick="ExportarProyectosExcel" Color="Color.Primary" Style="@(Layout.esModoNocturno() ? "color:white" : "")" Size="Size.Medium" Variant="Variant.Filled">
                Exportar a Excel
            </MudButton>
            <MudSpacer />
            <MudSpacer />
            <MudTextField T="string" @bind-Value="_searchString" Margin="Margin.Dense"
                          Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            @* Representación de los datos de los desarrollos *@
            <HierarchyColumn T="Desarrollo" ButtonDisabledFunc="@(x => x.Hijos == null || x.Hijos.Count() == 0)" />
            <PropertyColumn T="Desarrollo" TProperty="string" Property="x => x.Nombre" Title="Nombre" />
            <PropertyColumn T="Desarrollo" TProperty="string" Property="x => GetAutor(x)" Title="Autor" />
            <TemplateColumn SortBy="x => x.UsuarioAsignado == null ? null : x.UsuarioAsignado.Nombre">
                <HeaderTemplate>Programador</HeaderTemplate>
                <CellTemplate>
                    <span @onclick:stopPropagation="true">
                    <MudChip Color="Color.Primary" 
                             OnClick="@((e) => {if ((menuRol != null && menuRol.Editar) || context.Item.UsuarioAsignado == null) { EditProgramadorDialog(context.Item);}})">
                        @if (context.Item.UsuarioAsignado == null)
                        {
                            @txtSinProg;
                        }
                        else
                        {
                            @context.Item.UsuarioAsignado?.Nombre
                        }

                    </MudChip>
                    </span>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn SortBy="x => x.EstadoDesarrollo == null ? null : x.EstadoDesarrollo.Nombre">
                <HeaderTemplate>Estado</HeaderTemplate>
                <CellTemplate>
                    @{
                        var color = $"background-color: {context.Item.EstadoDesarrollo?.Color};";
                    }
                    <span @onclick:stopPropagation="true">
                    <MudChip Color="Color.Primary" Style="@color"
                    OnClick="@((e) => { if(menuRol != null && (menuRol.Editar || menuRol.Rol.Name.ToUpper() == "CLIENTE")) EditEstadoDialog(context.Item); })">
                        @context.Item.EstadoDesarrollo?.Nombre
                    </MudChip>
                    </span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn T="Desarrollo" TProperty="DateTime" Property="x => x.FechaCreacion" Title="Fecha de Creación" Format="dd/MM/yyyy" />
            <PropertyColumn T="Desarrollo" TProperty="DateTime" Property="x => x.FechaEntrega" Title="Fecha de Entrega" Format="dd/MM/yyyy" />
            <PropertyColumn T="Desarrollo" TProperty="DateTime?" Property="x => x.FechaFinalizacion" Title="Fecha de Finalización " Format="dd/MM/yyyy" />
            <TemplateColumn Sortable="false">
                <CellTemplate>
                    @if (Layout.esModoNocturno())
                    {
                        @*Editar Desarrollo*@
                        <MudButtonGroup VerticalAlign="false" Style="@($"background-color: {tema.Theme.PaletteDark.Primary.ToString()}; color:white")" Variant="Variant.Outlined">
                            <MudTooltip Text="Ver Información">
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Style="color:white" OnClick="@((e) => { InfoDesarrolloDialog(context.Item); })" />
                            </MudTooltip>
                            @if (menuRol != null && menuRol.Crear)
                            {
                                <MudTooltip Text="Agregar">
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Style="color:white" OnClick="@((e) => {  NewDesarrolloDialog(context.Item); })" />
                                </MudTooltip>
                            }
                            @if (menuRol != null && ((menuRol.Editar) || (menuRol.Terminar ?? true)))
                            {
                                <MudTooltip Text="Editar Desarrollo">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Style="color:white" OnClick="@((e) => { EditDesarrolloDialog(context.Item); })" />
                                </MudTooltip>
                            }
                            @if (menuRol != null && menuRol.Eliminar)
                            {
                                <MudTooltip Text="Eliminar">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Style="color:white" OnClick="@((e) => { EliminarDesarrollo(context.Item); })" />
                                </MudTooltip>
                            }

                        </MudButtonGroup>
                    }
                    else
                    {
                        @*Editar Desarrollo*@
                        <MudButtonGroup VerticalAlign="false" Color="Color.Primary" Variant="Variant.Outlined">

                            <MudTooltip Text="Ver Información">
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" OnClick="@((e) => { InfoDesarrolloDialog(context.Item); })" />
                            </MudTooltip>
                            @if (menuRol != null && menuRol.Crear)
                            {
                                <MudTooltip Text="Agregar">
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@((e) => {  NewDesarrolloDialog(context.Item); })" />
                                </MudTooltip>
                            }
                            @if (menuRol != null && ((menuRol.Editar) || (menuRol.Terminar ?? true)))
                            {
                                <MudTooltip Text="Editar Desarrollo">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@((e) => { EditDesarrolloDialog(context.Item); })" />
                                </MudTooltip>
                            }
                            @if (menuRol != null && menuRol.Eliminar)
                            {
                                <MudTooltip Text="Eliminar">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" OnClick="@((e) => { EliminarDesarrollo(context.Item); })" />
                                </MudTooltip>
                            }

                        </MudButtonGroup>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            @if (context.Item.Hijos != null && context.Item.Hijos.Count() > 0)
            {
                <CascadingValue Value="this">
                    <SubDesarrolloLista proyectoPadre="@proyecto" desarrolloPadre="@context.Item" id="@proyecto.Id.ToString()"></SubDesarrolloLista>
                </CascadingValue>
                
            }
           
        </ChildRowContent>

        
        @*//Paginación *@
        <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="@((_grid.GetFilteredItemsCount() + _grid.RowsPerPage - 1) / _grid.RowsPerPage)" Class="pa-4" />
        </PagerContent>
    </MudDataGrid>
<MudDialog @bind-IsVisible="@_uploadInProgress">
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center">Cargando Proyectos...</MudText>
        <br />
        <MudProgressLinear Value="@progress" Striped="true" Size="Size.Medium" Buffer="true" BufferValue="@progressBuffer" />
        <br />
        <MudText Align="Align.Center">@progressText</MudText>
    </DialogContent>
</MudDialog>


    @code {
     [CascadingParameter]
    public MainLayout Layout { get; set; }

        Stack<Desarrollo> navegacionProyecto = new Stack<Desarrollo>();
    public bool activados = true;
    public string estados = "";
    private bool _uploadInProgress;
    private double progress = 0;
    private double progressBuffer = 0;
    private string progressText = "";
    private int numDesarrollo { get; set; }
    string _searchString = "";
    private MudDataGrid<Desarrollo> _grid;
    private int _selectedPage;
    private List<Desarrollo> lstDesarrollo = new List<Desarrollo>();
    public Desarrollo desarrollo { get; set; }
    [Parameter] public Proyecto proyecto { get; set; }
    [Parameter] public string id { get; set; }
    [Parameter] public EventCallback<int> OnCountDesarrollo { get; set; }
    private MenuRol menuRol = null;
    private string url = "";
    private int idMenu = 0;
    private bool ischecked = false;
    string txtSinProg = "Sin asignar";
    string txtFecha = "Fecha";
    private List<String> _selectedEstadosDesarrollo = new List<String>();
    private List<String> _selectedProgramadores = new List<String>();

    private List<EstadoDesarrollo> _estadosDesarrollo = new List<EstadoDesarrollo>();

    [Parameter]
    public string ProyectoSelect { get; set; }

    private List<ProgramadoresProyecto> _programadores = new List<ProgramadoresProyecto>();
    public CPMUser usuario { get; set; }

    public string GetAutor(Desarrollo d)
    {
        return d?.Autor?.Nombre ?? "";
    }

    private DateRange _dateRange { get; set; }
    private MudDateRangePicker _picker;
    private bool _autoClose;

    private void PageChanged(int i)
    {
        _selectedPage = i - 1;
        StateHasChanged();
    }

    void limpiarNavegacion()
    {
        navegacionProyecto.Clear();
        navegacionProyecto.Push(desarrollo);
        StateHasChanged();
    }

    void volverAtras()
    {
        navegacionProyecto.Pop();
        StateHasChanged();
    }

    private async Task VerProyecto(Desarrollo des)
    {
        navegacionProyecto.Push(_ApplicationDbContext.Desarrollos.FirstOrDefault(u => u.Id == des.Id));
        await CargarDesarrolloPorProyecto(proyecto);
        StateHasChanged();
    }

    private bool Cargando = true;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (int.TryParse(id, out int projectId))
            {
                usuario = Layout.usuario;

                //url = GetLastSegmentUrl();
                //idMenu = GetIdMenu(url);
                menuRol = await Crud.GetMenuRol((int)MenuEnum.Desarrollo, usuario);

                Cargando = false;
                navegacionProyecto.Push(desarrollo);
                proyecto = await _ApplicationDbContext.Proyectos.FindAsync(projectId);
                await CargarDesarrolloPorProyecto(proyecto);
                await cargarProgramadores();
                await cargarEstadosDesarrollos();
                //await using var ctx = await DbFactory.CreateDbContextAsync();

                OnCountDesarrollo.InvokeAsync(await _ApplicationDbContext.Desarrollos.Where(it => it.Proyecto.Id == projectId && it.EstadoDesarrollo.Nombre == "Pendiente").CountAsync());
                // Obtener la lista de nombres de los tipos de incidencias
                var tiposDesarrollo = await _ApplicationDbContext.EstadosDesarrollos
                    .Where(e => e.Notificar)
                    .Select(e => e.Nombre)
                    .ToListAsync();


                Dictionary<string, int> recuentoDesarrolloPorTipo = new Dictionary<string, int>();


                foreach (var tipo in tiposDesarrollo)
                {
                    int recuento = await _ApplicationDbContext.Desarrollos
                        .Where(it => it.Proyecto.Id == projectId && it.EstadoDesarrollo.Nombre == tipo)
                        .CountAsync();

                    recuentoDesarrolloPorTipo.Add(tipo, recuento);
                }

                await CalcularTotalDesarrollo();
                _selectedPage = 0;
            }
            else
            {
                await CargarDesarrolloDesdeBD();
            }
            StateHasChanged();
        }
        catch(Exception ex)
        {
            await Task.Delay(100);
            await OnInitializedAsync();
        }
    }

    private string GetLastSegmentUrl()
    {
        Uri uri = new Uri(_navigationManager.Uri);
        Uri basePath = new Uri(_navigationManager.BaseUri);
        string relativeUri = basePath.MakeRelativeUri(uri).ToString();
        int indiceBarra = relativeUri.IndexOf('/');
        string nombreUrl = relativeUri.Substring(0, indiceBarra);
        return nombreUrl;
    }

    private int GetIdMenu(string url)
    {
        int menuId = 0;
        foreach (MenuEnum menuOption in Enum.GetValues(typeof(MenuEnum)))
        {
            if (GetEnumDescription(menuOption).Equals(url))
            {
                menuId = (int)menuOption;
                return menuId;
            }
        }
        return menuId;
    }

    //Metodo para obtener la descripcion de un valor de un enum
    private string GetEnumDescription(Enum value)
    {
        Type type = value.GetType();
        string nombre = Enum.GetName(type, value);
        FieldInfo fieldInfo = type.GetField(nombre);

        DescriptionAttribute attribute = Attribute.GetCustomAttribute(fieldInfo, typeof(DescriptionAttribute)) as DescriptionAttribute;
        return attribute == null ? null : attribute.Description;
    }

    public async Task CargarDesarrolloPorProyecto(Proyecto pro)
    {
        try
        {
            lstDesarrollo = await _ApplicationDbContext.Desarrollos
            .Include(it => it.EstadoDesarrollo)
            .Include(it => it.Proyecto)
            .Include(it => it.Autor)
            .Where(desarrollo => desarrollo.Proyecto.Id == pro.Id)
            .OrderByDescending(p => p.FechaCreacion)
            .ToListAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {        
            await Task.Delay(100);
            await CargarDesarrolloPorProyecto(pro);
        }
    }
    private async Task CargarDesarrolloDesdeBD()
    {
        try
        {
            lstDesarrollo = await _ApplicationDbContext.Desarrollos.Include(it => it.EstadoDesarrollo).Include(it => it.Proyecto).Include(it => it.Autor).Include(it => it.UsuarioAsignado).ToListAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {           
            await Task.Delay(100);
            await CargarDesarrolloDesdeBD();
        }
    }

    private List<Desarrollo> FiltrarDesarrollo()
    {
        return lstDesarrollo.FindAll(it =>
            (it.Nombre != null && it.Nombre.ToUpper().Contains(_searchString.ToUpper())) ||
            (it.FechaEntrega.ToString().ToUpper().Contains(_searchString.ToUpper())) ||
            (it.FechaCreacion.ToString().ToUpper().Contains(_searchString.ToUpper())) ||
            (it.FechaFinalizacion.ToString().ToUpper().Contains(_searchString.ToUpper())))
            .FindAll(it => it.Padre == null)
            .FindAll(it => (!_selectedEstadosDesarrollo.Any() || _selectedEstadosDesarrollo.Any(s => s == it.EstadoDesarrollo?.Nombre)))
            .FindAll(it => (!_selectedProgramadores.Any() || _selectedProgramadores.Any(s => s == it.UsuarioAsignado?.Nombre)))
            .FindAll(it =>
            (_dateRange == null ||
             (it.FechaEntrega >= _dateRange.Start && it.FechaEntrega <= _dateRange.End) ||
             (it.FechaCreacion >= _dateRange.Start && it.FechaCreacion <= _dateRange.End) ||
             (it.FechaFinalizacion >= _dateRange.Start && it.FechaFinalizacion <= _dateRange.End)));
    }

    private async Task NewDesarrolloDialog()   
    {

        if (desarrollo == null)
        {
            desarrollo = new Desarrollo();

        }

        if (!string.IsNullOrEmpty(id))
        {
            if (int.TryParse(id, out int projectId))
            {

                desarrollo.Proyecto = await _ApplicationDbContext.Proyectos.FindAsync(projectId);  

                var parameters = new DialogParameters();
                parameters.Add("Proyecto", desarrollo.Proyecto);
                parameters.Add("usuario", usuario);
                //parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
                var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium, DisableBackdropClick = true };
                var dialog = await _dialogService.Show<NewDesarrollo>("Nuevo desarrollo", parameters, options).Result;


                if (dialog.Data != null)
                {
                    await CargarDesarrolloPorProyecto(proyecto);
                    OnCountDesarrollo.InvokeAsync(await _ApplicationDbContext.Desarrollos.Where(it => it.Proyecto.Id == projectId && it.EstadoDesarrollo.Nombre == "Pendiente").CountAsync());

                    StateHasChanged();

                }

                else
                {
                    var confirmResult = await _dialogService.ShowMessageBox(
                       "Confirmación",
                       "¿Estás seguro de que quieres cancelar?",
                       "Sí",
                       "No",
                       "",
                       new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Small }
                   );
                   

                    if (confirmResult == true)
                    {

                        Console.WriteLine("Cancelación confirmada");
                    }
                    else
                    {

                        Console.WriteLine("Cancelación no confirmado");
                        await NewDesarrolloDialog();
                    }
                }
            }
            else
            {

                Console.WriteLine("ID de desarrollo no válida");
                return;
            }
        }


    }
    private async void NewDesarrolloDialog(Desarrollo padre)
    {

        if (desarrollo == null)
        {
            desarrollo = new Desarrollo();

        }

        if (!string.IsNullOrEmpty(id))
        {
            if (int.TryParse(id, out int projectId))
            {

                desarrollo.Proyecto = await _ApplicationDbContext.Proyectos.FindAsync(projectId);
                var parameters = new DialogParameters();
                parameters.Add("Proyecto", desarrollo.Proyecto);
                parameters.Add("desarrollopadre", padre);
                //parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
                var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
                var dialog = await _dialogService.Show<NewDesarrollo>("Nuevo desarrollo", parameters, options).Result;


                if (dialog.Data != null)
                {
                    await CargarDesarrolloPorProyecto(proyecto);
                    OnCountDesarrollo.InvokeAsync(await _ApplicationDbContext.Desarrollos.Where(it => it.Proyecto.Id == projectId && it.EstadoDesarrollo.Nombre == "Pendiente").CountAsync());

                    StateHasChanged();

                }
            }
            else
            {

                Console.WriteLine("ID de desarrollo no válida");
                return;
            }
        }


    }

    private async void InfoDesarrolloDialog(Desarrollo des)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Small };
        parameters.Add("desarrollo", des);
        //parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
        var dialog = await _dialogService.Show<InfoDesarrollo>(des.Nombre, parameters, options).Result;
    }

    private async void EliminarDesarrollo(Desarrollo des)
    {

        var result = await _dialogService.ShowMessageBox("Eliminar desarrollo", "¿Seguro que quieres eliminar desarrollo?", "Si", "No");
        des = _ApplicationDbContext.Desarrollos.FirstOrDefault(it => it.Id == des.Id);

        if (result is true && des != null)
        {
            if(des.Hijos != null && des.Hijos.Count() != 0){
                foreach(Desarrollo hijo in des.Hijos)
                {
                    _ApplicationDbContext.Desarrollos.Remove(hijo);
                }
            }
            _ApplicationDbContext.Desarrollos.Remove(des);
            await _ApplicationDbContext.SaveChangesAsync();
            Snackbar.Add("Desarrollo eliminado correctamente", Severity.Success);
            _navigation.NavigateTo(_navigation.GetUriWithQueryParameter("/Proyectos/", proyecto.Id));
        }

        _ApplicationDbContext.EstadosDesarrollos.OrderBy(it => it.Id).ToList();
        if (int.TryParse(id, out int projectId))
        {
            OnCountDesarrollo.InvokeAsync(await _ApplicationDbContext.Desarrollos.Where(it => it.Proyecto.Id == projectId && it.EstadoDesarrollo.Nombre == "Pendiente").CountAsync());
        }
        await CargarDesarrolloPorProyecto(proyecto);
        StateHasChanged();

    }

    private async Task EditDesarrolloDialog(Desarrollo des)
    {

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, DisableBackdropClick = true, MaxWidth = MaxWidth.Medium };

        var parameters = new DialogParameters();
        parameters.Add("desarrollo", des);
        parameters.Add("proyecto", proyecto);
        parameters.Add("EstadoAnt", des.EstadoDesarrollo.Nombre.ToUpper());
        parameters.Add("canEdit", menuRol.Editar);  // Pasamos el parámetro para habilitar/deshabilitar campos
        parameters.Add("canFinish", menuRol.Terminar ?? true);  // Pasamos si puede terminar
        //parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
        var dialog = await _dialogService.Show<NewDesarrollo>("Editar Desarrollo", parameters, options).Result;
        if (dialog.Data != null)
        {
            
        }
        await CargarDesarrolloPorProyecto(proyecto);
        StateHasChanged();
    }



    //Editar un Estado
    private async Task EditEstadoDialog(Desarrollo des)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, DisableBackdropClick = true };

        var parameters = new DialogParameters();
        parameters.Add("desarrollo", des);
        parameters.Add("canEdit", menuRol.Editar); // Pasar si puede editar
        parameters.Add("canFinish", menuRol.Terminar ?? true); // Pasar si puede terminar
        //parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
        var dialog = await _dialogService.Show<EditEstadoDesarrollo>("Editar estado", parameters, options).Result;
        if (dialog.Data != null)
        {
            // Si FinalizacionDesarrollo está activo, establecer la FechaFinalizacion
            if (des.EstadoDesarrollo.FinalizacionDesarrollo)
            {
                des.FechaFinalizacion = DateTime.Now;
                _ApplicationDbContext.Desarrollos.Update(des);
                _ApplicationDbContext.SaveChanges();
            }
            await CargarDesarrolloPorProyecto(proyecto);
            StateHasChanged();
        }
    }

    //Editar un Programador
    private async Task EditProgramadorDialog(Desarrollo des)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, DisableBackdropClick = true };

        var parameters = new DialogParameters();
        parameters.Add("desarrollo", des);
        //parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
        parameters.Add("usuario", usuario);
        parameters.Add("proyecto", proyecto);
        parameters.Add("allow", menuRol != null);
        var dialog = await _dialogService.Show<EditProgramador>("Asignar programador", parameters, options).Result;
        if (dialog.Data != null)
        {
            await CargarDesarrolloPorProyecto(proyecto);
            StateHasChanged();
        }
    }

    private async Task cargarProgramadores()
    {
        if (int.TryParse(id, out int projectId))
        {
            //await using var ctx = await DbFactory.CreateDbContextAsync();

            _programadores = await _ApplicationDbContext.ProgramadoresProyectos.Include(it => it.Programador).Include(it => it.Proyecto).Where(programador => programador.Proyecto.Id == projectId).ToListAsync();
        }
    }

    private async Task cargarEstadosDesarrollos()
    {
        //await using var ctx = await DbFactory.CreateDbContextAsync();

        _estadosDesarrollo = await _ApplicationDbContext.EstadosDesarrollos.ToListAsync();

    }
    private void ToggleSelection(string item, List<String> lista)
    {
        if (lista.Contains(item))
        {
            lista.Remove(item);
        }
        else
        {
            lista.Add(item);
        }
    }

    private string TextSelection(string item, List<String> lista)
    {
        var texto = "";

        if (lista.Count == 0)
        {
            texto = item;
        }
        else if (lista.Count == 1)
        {
            texto = lista.FirstOrDefault();
        }
        else
        {
            texto = "2 " + item + " o más seleccionados";
            texto = texto.Substring(0, Math.Min(texto.Length, 25)) + "...";
        }

        return texto;
    }

    private async Task CalcularTotalDesarrollo()
    {
        if (int.TryParse(id, out int projectId))
        {
            await using var ctx = await DbFactory.CreateDbContextAsync();

            // Obtener la lista de nombres de los tipos de incidencias seleccionados
            var tiposDesarrollo = await ctx.EstadosDesarrollos
                                            .Where(e => e.Notificar)
                                            .Select(e => e.Nombre)
                                            .ToListAsync();

            //Contamos los elementos en desarrollo
            int totalDesarrollo = 0;

            // Sumamos
            foreach (var tipo in tiposDesarrollo)
            {
                int recuento = await ctx.Desarrollos
                                        .Where(it => it.Proyecto.Id == projectId && it.EstadoDesarrollo.Nombre == tipo)
                                        .CountAsync();

                totalDesarrollo += recuento;
            }

            // Asignar el total al contador
            numDesarrollo = totalDesarrollo; 

            // Actualizamos el valor de la pagina anterior
            await OnCountDesarrollo.InvokeAsync(numDesarrollo);
        }
    }
    private async void StartedEditingItem(DataGridRowClickEventArgs<Desarrollo> args)
    {
        await EditDesarrolloDialog(args.Item);


    }

    private class clsExportListaDesarrollo
    {
        public string nombre { get; set; }
        public string autor { get; set; }
        public string programadorAsignado { get; set; }
        public string estado { get; set; }
        public DateTime fechaCreacion { get; set; }
        public DateTime fechaEntrega{ get; set; }
        public DateTime? fechaCerrada { get; set; }
    }


    public async void ExportarProyectosExcel()
    {
        var listIds = new List<int>();

        if (_selectedProgramadores.Any() || _selectedEstadosDesarrollo.Any())
        {
            listIds = lstDesarrollo
                .Where(p => (!_selectedProgramadores.Any() || _selectedProgramadores.Contains(p.UsuarioAsignado.Nombre))
                         && (!_selectedEstadosDesarrollo.Any() || _selectedEstadosDesarrollo.Contains(p.EstadoDesarrollo.Nombre)))
                .Select(p => p.Id)
                .ToList();
            if (!listIds.Any())
            {
                return;
            }
        }
        else
        {
            listIds = lstDesarrollo.Select(p => p.Id).ToList();
        }

        var listaDesarrollo = _ApplicationDbContext.Desarrollos
                             .Where(p => listIds.Contains(p.Id))
                             .Select(p => new clsExportListaDesarrollo
                                 {
                                     nombre = p.Nombre,
                                     autor = p.Autor.Nombre,
                                     programadorAsignado = p.UsuarioAsignado.Nombre,
                                     estado = p.EstadoDesarrollo.Nombre,
                                     fechaCreacion = p.FechaCreacion,
                                     fechaEntrega=p.FechaEntrega,
                                     fechaCerrada = p.FechaFinalizacion
                                 })
                             .ToList();

        SpreadsheetInfo.SetLicense("E7OT-N392-PMUC-Q7ZS");

        ExcelFile workbook = new ExcelFile();
        ExcelWorksheet worksheet = workbook.Worksheets.Add("Proyectos");
        ListtoDataTableConverter converter = new ListtoDataTableConverter();

        List<clsExportListaDesarrollo> listaExportar = new List<clsExportListaDesarrollo>();

        foreach (var desarrollo in listaDesarrollo)
        {
            clsExportListaDesarrollo exportDesarrollo = new clsExportListaDesarrollo
                {
                    nombre = desarrollo.nombre,
                    autor = desarrollo.autor,
                    programadorAsignado = desarrollo.programadorAsignado,
                    estado = desarrollo.estado,
                    fechaCreacion = desarrollo.fechaCreacion,
                    fechaCerrada = desarrollo.fechaCerrada
                };

            listaExportar.Add(exportDesarrollo);
        }

        DataTable dt = converter.ToDataTable(listaDesarrollo);

        InsertDataTableOptions options = new InsertDataTableOptions() { ColumnHeaders = true };
        worksheet.InsertDataTable(dt, options);
        using (MemoryStream memoryStream = new MemoryStream())
        {
            workbook.Save(memoryStream, GemBox.Spreadsheet.XlsxSaveOptions.XlsxDefault);
            memoryStream.Position = 0;

            await _jSRuntime.InvokeVoidAsync("downloadFile", "proyecto.xlsx", Convert.ToBase64String(memoryStream.ToArray()));
        }

    }
}
}