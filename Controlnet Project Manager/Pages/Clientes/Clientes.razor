@page "/Clientes"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Http;
@using System.Data;
@using System.Net
@using System.Net.Mail
@using System.Text;
@using System.Xml.Linq
@using Controlnet_Project_Manager.Areas.Identity.Data
@using Controlnet_Project_Manager.Data
@using Controlnet_Project_Manager.Shared.Model
@using Microsoft.EntityFrameworkCore
@using Button = Controlnet_Project_Manager.Shared.Model.Button
@using System.Reflection;
@using System.ComponentModel;

@attribute [Authorize]

@inject AuthenticationStateProvider _auth
@inject UserManager<CPMUser> _UserManager
@inject ApplicationDbContext _ApplicationDbContext
@inject IDialogService _dialogService;
@inject IDbContextFactory<ApplicationDbContext> DbFactory;
@inject CRUD Crud
@inject IHttpContextAccessor _httpContextAccessor
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _navigationManager



    @{
        List<Button> botones = new List<Button>()
        {
            new ActionButton { Text = "Nuevo Cliente",  OnClick = NewProDialog , Icon = @Icons.Material.Filled.Add }
        };
}
@if (!Cargando)
{
@if (menuRol != null)
{
    @if (menuRol.Crear)
    {
        <ToolBar Title="CLIENTES" ButtonsLeft="botones"></ToolBar>
    }
    else
    {
        <ToolBar Title="CLIENTES"></ToolBar>
    }


<br/>
<br />

        <MudDataGrid @ref="@_grid" Items="@FiltrarCliente()" T="Cliente" RowClick="@((x)=>EditClientDialog(x.Item))" Hover="true" ShowColumnOptions="false" ShowMenuIcon="false" Dense="true" Hideable="true" CurrentPage="@_selectedPage" RowsPerPage="15">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Clientes</MudText>

        <MudSpacer />
        <MudSpacer />
        <MudTextField T="string" @bind-Value="_searchString" Margin="Margin.Dense"
                      Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>

    <Columns>
        @*Represantacion De los Datos de los clientes*@
        <PropertyColumn T="Cliente" TProperty="string" Property="x=> x.Nombre" Title="Nombre" />
        <PropertyColumn T="Cliente" TProperty="string" Property="x=> x.PaginaWeb" Title="Página Web" />
        <PropertyColumn T="Cliente" TProperty="string" Property="x=> x.NombreContacto" Title="Nombre Contacto" />
        <PropertyColumn T="Cliente" TProperty="string" Property="x=> x.Telefono" Title="Teléfono" />
        <PropertyColumn T="Cliente" TProperty="string" Property="x=> x.Correo" Title="Correo electrónico" />

        <TemplateColumn Sortable="false">
            <CellTemplate>
                @if (menuRol.Editar)
                {
                    <MudTooltip Text="Editar Cliente">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="@(Layout.esModoNocturno() ? Color.Tertiary:Color.Primary)" OnClick="@((e) => { EditClientDialog(context.Item); })" />
                    </MudTooltip>
                }
                @if (menuRol.Eliminar)
                {
                    <MudTooltip Text="Eliminar">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="@(Layout.esModoNocturno() ? Color.Tertiary:Color.Primary)" OnClick="@((e) => { EliminarCliente(context.Item); })" />
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
            
            
    </Columns>
    @*    //Paginacion*@
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_grid.GetFilteredItemsCount() + _grid.RowsPerPage - 1) / _grid.RowsPerPage)" Class="pa-4" />
    </PagerContent>
</MudDataGrid>


<MudDialog @bind-IsVisible="@_uploadInProgress">
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center">Cargando Proyectos...</MudText>
        <br />
        <MudProgressLinear Value="@progress" Striped="true" Size="Size.Medium" Buffer="true" BufferValue="@progressBuffer" />
        <br />
        <MudText Align="Align.Center">@progressText</MudText>
        </DialogContent>
    </MudDialog>
}
else if (menuRol == null)
{
    <MudText Typo="Typo.h6" Align="Align.Center">Oops, no estás autorizado para ver esta página</MudText>
    }
}
else
{
    <ToolBar Title="CLIENTES"></ToolBar>
    <br />
    <div style="display:flex; align-items:center; justify-content:center">
        <MudProgressCircular Indeterminate="true"></MudProgressCircular>
    </div>
}
@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    public Cliente clientes { get; set; }
    Stack<Cliente> navegacionCliente = new Stack<Cliente>();  
    private bool _uploadInProgress;
    private double progress = 0;
    private double progressBuffer = 0;
    private string progressText = "";
    string _searchString = "";
    public CPMUser usuario { get; set; }
    List<Cliente> lstCliente = new List<Cliente>();
    private string url = "";
    private int idMenu = 0;
    private MenuRol menuRol = null;

    private MudDataGrid<Cliente> _grid;

    private int _selectedPage;

    private void PageChanged(int i)
    {
        _selectedPage = i - 1;
        StateHasChanged();
    }

    private List<Cliente> FiltrarCliente()
    {
        return lstCliente.FindAll(it =>
            (it.Nombre != null && it.Nombre.ToUpper().Contains(_searchString.ToUpper())));

    }

    private async Task<List<Cliente>> cargarClientes()
    {
        await using var ctx = await DbFactory.CreateDbContextAsync();
        lstCliente = await ctx.Clientes.AsNoTracking().ToListAsync();

        return lstCliente;
    }

    void limpiarNavegacion()
    {
        navegacionCliente.Clear();
        navegacionCliente.Push(clientes);
        StateHasChanged();
    }

    void volverAtras()
    {
        navegacionCliente.Pop();
        StateHasChanged();
    }

    private async Task VerProyecto(Cliente cli)
    {
        navegacionCliente.Push(_ApplicationDbContext.Clientes.FirstOrDefault(u => u.Id == cli.Id));
        await cargarClientes();
        StateHasChanged();
    }
    private bool Cargando = true;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        usuario = Layout.usuario;

        if(usuario != null)
        {
            url = GetLastSegmentUrl();
            idMenu = GetIdMenu(url);
            menuRol = await Crud.GetMenuRol(idMenu, usuario);

            Cargando = false;

            navegacionCliente.Push(clientes);
            await cargarClientes();
            _selectedPage = 0;
            StateHasChanged();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (usuario == null)
        {
            await OnInitializedAsync();
        }
    }

    private string GetLastSegmentUrl()
    {
        Uri uri = new Uri(_navigationManager.Uri);
        Uri basePath = new Uri(_navigationManager.BaseUri);
        string relativeUri = basePath.MakeRelativeUri(uri).ToString();
        return relativeUri;
    }

    private int GetIdMenu(string url)
    {
        int menuId = 0;
        foreach (MenuEnum menuOption in Enum.GetValues(typeof(MenuEnum)))
        {
            if (GetEnumDescription(menuOption).Equals(url))
            {
                menuId = (int)menuOption;
                return menuId;
            }
        }
        return menuId;
    }

    //Metodo para obtener la descripcion de un valor de un enum
    private string GetEnumDescription(Enum value)
    {
        Type type = value.GetType();
        string nombre = Enum.GetName(type, value);
        FieldInfo fieldInfo = type.GetField(nombre);

        DescriptionAttribute attribute = Attribute.GetCustomAttribute(fieldInfo, typeof(DescriptionAttribute)) as DescriptionAttribute;
        return attribute == null ? null : attribute.Description;
    }

    private async void NewProDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var parameters = new DialogParameters();
        // parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
        var dialog = await _dialogService.Show<NewCliente>("Nuevo cliente", parameters,options).Result;

        if (dialog.Data != null)
        {
            await cargarClientes();
            StateHasChanged();
        }
        else
        {
            return;
        }


    }

    private async void EliminarCliente(Cliente cli)
    {

        var result = await _dialogService.ShowMessageBox("Eliminar cliente", "¿Seguro que quieres eliminar el cliente?", "Si", "No");
        cli = _ApplicationDbContext.Clientes.FirstOrDefault(it => it.Id == cli.Id);

        if (result is true && cli != null)
        {

            _ApplicationDbContext.Clientes.Remove(cli);
            await _ApplicationDbContext.SaveChangesAsync();

        }

        _ApplicationDbContext.Clientes.OrderBy(it => it.Id).ToList();
        await cargarClientes();
        StateHasChanged();

    }

    //Editar un cliente
    private async Task EditClientDialog(Cliente cli)
    {
        @if (menuRol != null && menuRol.Editar)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, DisableBackdropClick = true };

            var parameters = new DialogParameters();
            // parameters.Add("_ApplicationDbContext", _ApplicationDbContext);
            parameters.Add("Cliente", cli);

            var dialog = await _dialogService.Show<NewCliente>("Editar cliente", parameters, options).Result;
            if (dialog.Data != null)
            {
                await cargarClientes();
                StateHasChanged();
            }
        }
    }

}