// <auto-generated />
using System;
using Controlnet_Project_Manager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Controlnet_Project_Manager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.CheckinCheckout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("Entrada")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdProyecto")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdProyecto");

                    b.HasIndex("IdUsuario");

                    b.ToTable("CheckinCheckouts");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NombreContacto")
                        .HasColumnType("longtext");

                    b.Property<string>("PaginaWeb")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Desarrollo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Informacion")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("idAutor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("idEstadoDesarrollo")
                        .HasColumnType("int");

                    b.Property<int?>("idPadre")
                        .HasColumnType("int");

                    b.Property<int>("idProyecto")
                        .HasColumnType("int");

                    b.Property<string>("idUsuarioAsignado")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("idAutor");

                    b.HasIndex("idEstadoDesarrollo");

                    b.HasIndex("idPadre");

                    b.HasIndex("idProyecto");

                    b.HasIndex("idUsuarioAsignado");

                    b.ToTable("Desarrollos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoDesarrollo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("idDesarrollo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idDesarrollo");

                    b.ToTable("DocumentosDesarrollos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("idIncidencia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idIncidencia");

                    b.ToTable("DocumentosIncidencias");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoPeticion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("idPeticion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idPeticion");

                    b.ToTable("DocumentosPeticiones");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoProyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("idProyecto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idProyecto");

                    b.ToTable("DocumentosProyectos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EquiposProyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int");

                    b.Property<int>("IdProyecto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEquipo");

                    b.HasIndex("IdProyecto");

                    b.ToTable("EquiposProyectos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Oculto")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EstadoDesarrollo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("FinalizacionDesarrollo")
                        .HasColumnType("BIT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("Notificar")
                        .HasColumnType("BIT");

                    b.Property<string>("idUsuarioAutor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("idUsuarioAutor");

                    b.ToTable("EstadosDesarrollos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EstadoIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("CierraIncidencia")
                        .HasColumnType("BIT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("Notificar")
                        .HasColumnType("BIT");

                    b.Property<string>("idUsuarioAutor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("idUsuarioAutor");

                    b.ToTable("EstadosIncidencias");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EstadoProyectoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdUsuario");

                    b.ToTable("EstadoProyectoUsuarios");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Incidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCerrada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Informacion")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("idAutor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("idEstadoIncidencia")
                        .HasColumnType("int");

                    b.Property<int?>("idPadre")
                        .HasColumnType("int");

                    b.Property<int>("idProyecto")
                        .HasColumnType("int");

                    b.Property<string>("idUsuarioAsignado")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("idAutor");

                    b.HasIndex("idEstadoIncidencia");

                    b.HasIndex("idPadre");

                    b.HasIndex("idProyecto");

                    b.HasIndex("idUsuarioAsignado");

                    b.ToTable("Incidencias");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.MenuRol", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Aceptar")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Crear")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Editar")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Eliminar")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdMenu")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<bool>("Rechazar")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Terminar")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("IdRol");

                    b.ToTable("MenuRoles");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<bool>("Eliminada")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("Leida")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("idUsuario")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("idUsuario");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Peticion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Aceptado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Informacion")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Razon")
                        .HasColumnType("longtext");

                    b.Property<string>("idAutor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("idDesarrollo")
                        .HasColumnType("int");

                    b.Property<int?>("idIncidencia")
                        .HasColumnType("int");

                    b.Property<int?>("idPadre")
                        .HasColumnType("int");

                    b.Property<int>("idProyecto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idAutor");

                    b.HasIndex("idDesarrollo");

                    b.HasIndex("idIncidencia");

                    b.HasIndex("idPadre");

                    b.HasIndex("idProyecto");

                    b.ToTable("Peticiones");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.ProgramadoresEquipos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEquipo")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdEquipo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ProgramadoresEquipos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.ProgramadoresProyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdProyecto")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdProyecto");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ProgramadoresProyectos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaPrevistaContrato")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaPrevistaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HorasEstimadas")
                        .HasColumnType("int");

                    b.Property<int>("HorasSemanalesEstimadas")
                        .HasColumnType("int");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuarioGitHub")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NombreRepositorioGitHub")
                        .HasColumnType("longtext");

                    b.Property<string>("Observaciones")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdUsuarioGitHub");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.ProyectoTecnologia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idProyecto")
                        .HasColumnType("int");

                    b.Property<int>("idTecnologia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idProyecto");

                    b.HasIndex("idTecnologia");

                    b.ToTable("ProyectosTecnologias");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<bool>("Plantilla")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PorcentajeConversion")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Tecnologia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tecnologias");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Data.CPMUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int?>("Coste")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("longblob");

                    b.Property<int?>("IdEquipo")
                        .HasColumnType("int");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("IdSuperior")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("TokenGitHub")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UsuarioGitHub")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdEquipo");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdSuperior");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.CheckinCheckout", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("IdProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Proyecto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Desarrollo", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Autor")
                        .WithMany()
                        .HasForeignKey("idAutor");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.EstadoDesarrollo", "EstadoDesarrollo")
                        .WithMany()
                        .HasForeignKey("idEstadoDesarrollo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Desarrollo", "Padre")
                        .WithMany("Hijos")
                        .HasForeignKey("idPadre");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany("Desarrollos")
                        .HasForeignKey("idProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "UsuarioAsignado")
                        .WithMany()
                        .HasForeignKey("idUsuarioAsignado");

                    b.Navigation("Autor");

                    b.Navigation("EstadoDesarrollo");

                    b.Navigation("Padre");

                    b.Navigation("Proyecto");

                    b.Navigation("UsuarioAsignado");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoDesarrollo", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Desarrollo", "Desarrollo")
                        .WithMany()
                        .HasForeignKey("idDesarrollo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desarrollo");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoIncidencia", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoPeticion", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Peticion", "Peticion")
                        .WithMany()
                        .HasForeignKey("idPeticion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Peticion");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.DocumentoProyecto", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("idProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EquiposProyecto", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Equipo", "Equipo")
                        .WithMany("Equipos")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany("Equipos")
                        .HasForeignKey("IdProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EstadoDesarrollo", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Autor")
                        .WithMany()
                        .HasForeignKey("idUsuarioAutor");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EstadoIncidencia", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Autor")
                        .WithMany()
                        .HasForeignKey("idUsuarioAutor");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.EstadoProyectoUsuario", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Incidencia", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Autor")
                        .WithMany()
                        .HasForeignKey("idAutor");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.EstadoIncidencia", "EstadoIncidencia")
                        .WithMany()
                        .HasForeignKey("idEstadoIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Incidencia", "Padre")
                        .WithMany("Hijos")
                        .HasForeignKey("idPadre");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany("Incidencias")
                        .HasForeignKey("idProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "UsuarioAsignado")
                        .WithMany()
                        .HasForeignKey("idUsuarioAsignado");

                    b.Navigation("Autor");

                    b.Navigation("EstadoIncidencia");

                    b.Navigation("Padre");

                    b.Navigation("Proyecto");

                    b.Navigation("UsuarioAsignado");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.MenuRol", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Rol", "Rol")
                        .WithMany("Menus")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Notificacion", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "IDUsuario")
                        .WithMany()
                        .HasForeignKey("idUsuario");

                    b.Navigation("IDUsuario");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Peticion", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Autor")
                        .WithMany()
                        .HasForeignKey("idAutor");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Desarrollo", "Desarrollo")
                        .WithMany()
                        .HasForeignKey("idDesarrollo");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencia");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Peticion", "Padre")
                        .WithMany("Hijos")
                        .HasForeignKey("idPadre");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany("Peticiones")
                        .HasForeignKey("idProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Desarrollo");

                    b.Navigation("Incidencia");

                    b.Navigation("Padre");

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.ProgramadoresEquipos", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Equipo", "Equipo")
                        .WithMany("Programadores")
                        .HasForeignKey("IdEquipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Programador")
                        .WithMany("Programadores")
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Equipo");

                    b.Navigation("Programador");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.ProgramadoresProyecto", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany("Programadores")
                        .HasForeignKey("IdProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Programador")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Programador");

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "OwnerRepositorioGithub")
                        .WithMany()
                        .HasForeignKey("IdUsuarioGitHub");

                    b.Navigation("Cliente");

                    b.Navigation("Estado");

                    b.Navigation("OwnerRepositorioGithub");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.ProyectoTecnologia", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("idProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Tecnologia", "Tecnologia")
                        .WithMany()
                        .HasForeignKey("idTecnologia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proyecto");

                    b.Navigation("Tecnologia");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Data.CPMUser", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Equipo", "Equipo")
                        .WithMany()
                        .HasForeignKey("IdEquipo");

                    b.HasOne("Controlnet_Project_Manager.Areas.Identity.Data.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRol");

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", "Superior")
                        .WithMany()
                        .HasForeignKey("IdSuperior");

                    b.Navigation("Equipo");

                    b.Navigation("Rol");

                    b.Navigation("Superior");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Controlnet_Project_Manager.Data.CPMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Desarrollo", b =>
                {
                    b.Navigation("Hijos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Equipo", b =>
                {
                    b.Navigation("Equipos");

                    b.Navigation("Programadores");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Incidencia", b =>
                {
                    b.Navigation("Hijos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Peticion", b =>
                {
                    b.Navigation("Hijos");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Proyecto", b =>
                {
                    b.Navigation("Desarrollos");

                    b.Navigation("Equipos");

                    b.Navigation("Incidencias");

                    b.Navigation("Peticiones");

                    b.Navigation("Programadores");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Areas.Identity.Data.Rol", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Controlnet_Project_Manager.Data.CPMUser", b =>
                {
                    b.Navigation("Programadores");
                });
#pragma warning restore 612, 618
        }
    }
}
